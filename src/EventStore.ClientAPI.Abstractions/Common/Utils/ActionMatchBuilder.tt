<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Linq.Expressions;
using System.Reflection;

<# var count = 10; #>
#if CLIENTAPI
namespace EventStore.ClientAPI.Common.Utils
#else
namespace EventStore.Common.Utils
#endif
{
<# for (int i = 1; i <= count; i++) {
    var types = string.Join(", ", Enumerable.Range(1, i).Select(x => "TArg" + x));
    var arguments = string.Join(", ", Enumerable.Range(1, i).Select(x => "arg" + x));
    var typeAndArguments = string.Join(", ", Enumerable.Range(1, i).Select(x => "TArg" + x + " arg" + x));
    var gParameters = string.Join(", ", Enumerable.Range(1, i).Select(x => "Parameter" + x));
#>
    /// <summary>Pattern matcher</summary>
    /// <typeparam name="TItem">Argument type</typeparam>
<# for (var t = 1; t <= i; t++) { #>
    /// <typeparam name="TArg<#= t #>">Argument type</typeparam>
<# } #>
    public sealed class ActionMatchBuilder<TItem, <#= types #>> : SimpleMatchBuilderBase<Action<TItem, <#= types #>>, TItem, object>
    {
<# for (var t = 1; t <= i; t++) { #>
        private ParameterExpression _parameter<#= t #>;
        /// <summary>Expression representing matching parameter</summary>
        private ParameterExpression Parameter<#= t #> => _parameter<#= t #> ?? (_parameter<#= t #> = Expression.Parameter(typeof(TArg<#= t #>), "arg<#= t #>"));
<# } #>

        private ParameterExpression[] _parameters;
        protected override ParameterExpression[] Parameters => _parameters ?? (_parameters = new[] 
            { 
                Parameter, <#= gParameters #>
            });
        private ParameterExpression[] _bindedParameters;
        protected override ParameterExpression[] BindedParameters => _bindedParameters ?? (_bindedParameters = new[] 
            { 
                <#= gParameters #>
            });

        /// <summary>Adds context-based matching case</summary>
        /// <typeparam name="TCtx">Context type</typeparam>
        public void Match<TCtx>(Action<TCtx, <#= types #>> handler) where TCtx : TItem
        {
            AddHandler<TCtx>((_, <#= arguments #>) => handler(_, <#= arguments #>));
        }

        private void AddHandler<TCtx>(Expression<Action<TCtx, <#= types #>>> processor) //where TCtx : TItem
        {
            Add<TCtx>(processor);
        }

        /// <summary>Adds context-based matching case</summary>
        /// <typeparam name="TCtx">Context type</typeparam>
        public void Match<TCtx>(Action<TCtx, <#= types #>> handler, Predicate<TCtx> shouldHandle) where TCtx : TItem
        {
            AddHandler<TCtx>((_, <#= arguments #>) => handler(_, <#= arguments #>), _ => shouldHandle(_));
        }

        private void AddHandler<TCtx>(Expression<Action<TCtx, <#= types #>>> processor, Expression<Predicate<TCtx>> condition) //where TCtx : TItem
        {
            Add<TCtx>(processor, condition);
        }

        public void MatchAny(Action<TItem, <#= types #>> handler)
        {
            EnsureCanAdd();
            FinalExpr = CreatePredicatedBasedExpr(condition: _ => true, processor: (_, <#= arguments #>) => handler(_, <#= arguments #>));
            _state = State.MatchAnyAdded;
        }

        public bool TryMatchAny(Action<TItem, <#= types #>> handler)
        {
            if (FinalExpr != null || _state != State.Adding) { return false; }
            FinalExpr = CreatePredicatedBasedExpr(condition: _ => true, processor: (_, <#= arguments #>) => handler(_, <#= arguments #>));
            _state = State.MatchAnyAdded;
            return true;
        }

        /// <summary>Performs match on the given value</summary>
        public void Match(TItem value, <#= typeAndArguments #>) => MatcherFunc(value, <#= arguments #>);

        /// <summary>Converts matcher into Action&lt;T&gt; instance</summary>
        public static implicit operator Action<TItem, <#= types #>>(ActionMatchBuilder<TItem, <#= types #>> matcher) => matcher.MatcherFunc;
    }
<# } #>
}