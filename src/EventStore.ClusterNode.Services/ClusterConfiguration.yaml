---
## Application Options

# Run-time conditionals.
#Defines:
#  - INFINITE_METASTREAMS
#  - ADDITIONAL_COMMIT_CHECKS
#  - DUMP_STATISTICS
#  - DO_NOT_TIMEOUT_REQUESTS
#  - ALWAYS_KEEP_SCAVENGED
#  - DISABLE_MERGE_CHUNKS

# Start the built in system projections. Default: false
StartStandardProjections: true

# Disable HTTP caching.
# DisableHTTPCaching: false

# Minimum number of worker threads when running under mono. Set to 0 to leave machine defaults.
# MonoMinThreadpoolSize: 10

# Force the Event Store to run in possibly harmful environments such as with Boehm GC.
# Force: false

# The number of seconds between statistics gathers. Default: 30s
StatsPeriodSec: 3600

# The number of threads to use for pool of worker services.
# WorkerThreads: 5

# Enables the tracking of various histograms in the backend, typically only used for debugging etc
# EnableHistograms: false

# Log Http Requests and Responses before processing them.
# LogHttpRequests: false

# Skip Index Scan on Reads. This skips the index scan which was used to stop reading duplicates.
# SkipIndexScanOnReads: false




## Database Options

# The minimum flush delay in milliseconds.
# MinFlushDelayMs: 2

# Disables the merging of chunks when scavenge is running
# DisableScavengeMerging: false

# The number of days to keep scavenge history
# ScavengeHistoryMaxAge: 30

# The number of reader threads to use for processing reads.
# ReaderThreadsCount: 4

# The number of chunks to cache in unmanaged memory.
# CachedChunks: -1
# The amount of unmanaged memory to use for caching chunks.
# ChunksCacheSize: 536871424

# Adjusts the maximum size of a mem table.
# MaxMemTableSize: 1000000
# The number of events to read per candidate in the case of a hash collision
# HashCollisionReadLimit: 100

# The path the db should be loaded/saved to.
# Db: data
# The path the index should be loaded/saved to.
# Index:

# Keep everything in memory, no directories or files are created.
# MemDb: false

# Bypasses the checking of file hashes of database during startup (allows for faster startup).
# SkipDbVerify: false

# Enables Write Through when writing to the file system, this bypasses filesystem caches.
# WriteThrough: false

# Enables Unbuffered/DirectIO when writing to the file system, this bypasses filesystem caches.
# Unbuffered: false

# Prepare timeout (in milliseconds).
# PrepareTimeoutMs: 2000                  # 2 seconds
# Commit timeout (in milliseconds).
# CommitTimeoutMs: 2000                   # 2 seconds

# Disable flushing to disk.  (UNSAFE: on power off)
# UnsafeDisableFlushToDisk: false

# Enable Queue affinity on reads during write process to try to get better ordering.
# BetterOrdering: false

# Disables Hard Deletes (UNSAFE: use to remove hard deletes)
# UnsafeIgnoreHardDelete: false

# Bypasses the checking of file hashes of indexes during startup and after index merges (allows for faster startup and less disk pressure after merges).
# SkipIndexVerify: false

# Sets the depth to cache for the mid point cache in index.
# IndexCacheDepth: 16

# Always keeps the newer chunks from a scavenge operation.
# AlwaysKeepScavenged: false

# The initial number of readers to start when opening a TFChunk
# ChunkInitialReaderCount: 5

# Number of threads to be used to initialize the database. Will be capped at host processor count.
# InitializationThreads: 1

# Change the way the DB files are opened to reduce their stickiness in the system file cache.
# ReduceFileCachePressure: false




## Projections Options

# Enables the running of projections. System runs built-in projections, All runs user projections. Default: None
RunProjections: All                    # None / System / All
# The number of threads to use for projections.
# ProjectionThreads: 3
# The number of minutes a query can be idle before it expires
# ProjectionsQueryExpiry: 5
# Fault the projection if the Event number that was expected in the stream differs from what is received. This may happen if events have been deleted or expired
#FaultOutOfOrderProjections: false




## Authentication Options

# The type of authentication to use.
# AuthenticationType: internal
# Path to the configuration file for authentication configuration (if applicable).
# AuthenticationConfig: 




## Scavenge options

# During large Index Merge operations, writes may be slowed down. Set this to the maximum index file level for which automatic merges should happen.
# Merging indexes above this level should be done manually.
# MaxAutoMergeIndexLevel = int.MaxValue




## Interface Options

# Internal IP Address.
# IntIp: 127.0.0.1

# External IP Address.
# ExtIp: 127.0.0.1

# Internal TCP Port.
# IntTcpPort: 1112

# External TCP Port.
# ExtTcpPort: 1113

# Internal HTTP Port.
# IntHttpPort: 2112

# External HTTP Port.
# ExtHttpPort: 2113

# Internal Secure TCP Port.
# IntSecureTcpPort: 0

# External Secure TCP Port.
# ExtSecureTcpPort: 0


# Advertise Internal Tcp Address As.
# IntIpAdvertiseAs: 

# Advertise External Tcp Address As.
# ExtIpAdvertiseAs: 

# Advertise Internal Tcp Port As.
# IntTcpPortAdvertiseAs: 0

# Advertise External Tcp Port As.
# ExtTcpPortAdvertiseAs: 0

# Advertise Internal Http Port As.
# IntHttpPortAdvertiseAs: 0

# Advertise External Http Port As.
# ExtHttpPortAdvertiseAs: 0

# Advertise Secure Internal Tcp Port As.
# IntSecureTcpPortAdvertiseAs: 0

# Advertise Secure External Tcp Port As.
# ExtSecureTcpPortAdvertiseAs: 0


# Heartbeat timeout for internal TCP sockets
# IntTcpHeartbeatTimeout: 700
# Heartbeat timeout for external TCP sockets
# ExtTcpHeartbeatTimeout: 1000

# Heartbeat interval for internal TCP sockets
# IntTcpHeartbeatInterval: 700
# Heartbeat interval for external TCP sockets
# ExtTcpHeartbeatInterval: 2000

# When enabled tells a single node to run gossip as if it is a cluster
# GossipOnSingleNode: false

# The maximum number of pending send bytes allowed before a connection is closed.
# ConnectionPendingSendBytesThreshold: 10 * 1024 * 1024

# Whether or not to run the admin ui on the external HTTP endpoint
# AdminOnExt: true
# Whether or not to accept statistics requests on the external HTTP endpoint, needed if you use admin ui
# StatsOnExt: true
# Whether or not to accept gossip requests on the external HTTP endpoint
# GossipOnExt: true

# The prefixes that the internal HTTP server should respond to.
# IntHttpPrefixes:
#   - 
#   - 

# The prefixes that the external HTTP server should respond to.
# ExtHttpPrefixes:
#   - 
#   - 

# Enables trusted authentication by an intermediary in the HTTP
# EnableTrustedAuth: false
# Add interface prefixes
# AddInterfacePrefixes: true

# Whether to use secure internal communication.
# UseInternalSsl: false
# Whether to disable insecure TCP communication
# DisableInsecureTCP: false
# Target host of server's SSL certificate.
# SslTargetHost: n/a
# Whether to validate that server's certificate is trusted.
# SslValidateServer: true




## Certificate Options

# The certificate store location name.
# CertificateStoreLocation:

# The certificate store name.
# CertificateStoreName:

# The certificate subject name.
# CertificateSubjectName:

# The certificate fingerprint/thumbprint.
# CertificateThumbprint:

# The path to certificate file.
# CertificateFile:

# The password to certificate in file.
# CertificatePassword:




## DotNetty Options

# Whether to use Libuv-Transport
# EnableLibuv: true

# If set to true, we will use IPV6 addresses upon DNS resolution for host names.
# Otherwise, we will use IPV4.
# DnsUseIpv6 = false

# If set to true, we will enforce usage of IPV4 or IPV6 addresses upon DNS resolution for host names.
# If dns-use-ipv6 = true, we will use IPV6 enforcement
# Otherwise, we will use IPV4.
# Warning: when ip family is enforced, any connection between IPV4 and IPV6 is impossible
#
# enforce-ip-family setting is used only in some special cases, when default behaviour of 
# underlying sockets leads to errors. Typically this occurs when an environment doesn't support
# IPV6 or dual-mode sockets.
# As of 09/21/2016 there are two known cases: running under Mono and in Azure WebApp  
# for them we will need enforce-ip-family = true, and for Azure dns-use-ipv6 = false
# This property is always set to true if Mono runtime is detected.
# EnforceIpFamily = false

# Sets the connectTimeoutMillis of all outbound connections,
# i.e. how long a connect may take until it is timed out
# ConnectionTimeout = 15 s

# Toggles buffer pooling on and off inside DotNetty.
# EnableBufferPooling = true

# Sets the high water mark for the in and outbound sockets,
# set to 0b for platform default
# WriteBufferHighWaterMark = 0b

# Sets the low water mark for the in and outbound sockets,
# set to 0b for platform default
# WriteBufferLowWaterMark = 0b

# Sets the send buffer size of the Sockets,
# set to 0b for platform default
# SendBufferSize = 256K

# Sets the receive buffer size of the Sockets,
# set to 0b for platform default
# ReceiveBufferSize = 256K

# Maximum message size the transport will accept, but at least 32000 bytes.
# MaxFrameSize = 10M

# Sets the size of the connection backlog
# Backlog = 4096

# Enables the TCP_NODELAY flag, i.e. disables Nagleâ€™s algorithm
# TcpNoDelay = true

# Enables TCP Keepalive, subject to the O/S kernelâ€™s configuration
# TcpKeepAlive = true

# TcpLinger = 0

# Enables SO_REUSEADDR, which determines when an ActorSystem can open
# the specified listen port (the meaning differs between *nix and Windows)
# Valid values are "on", "off", and "off-for-windows"
# due to the following Windows bug: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4476378
# "off-for-windows" of course means that it's "on" for all other platforms
# TcpReuseAddr = on

# Enables SO_REUSEPORT
# TcpReusePort = true

# Used to configure the number of I/O worker threads on server sockets

# Min number of threads to cap factor-based number to
# ServerSocketWorkerPoolSizeMin = 2

# The pool size factor is used to determine thread pool size
# using the following formula: ceil(available processors * factor).
# Resulting size is then bounded by the pool-size-min and
# pool-size-max values.
# ServerSocketWorkerPoolSizeFactor = 1.0

# Max number of threads to cap factor-based number to
# ServerSocketWorkerPoolSizeMax = 2

# Used to configure the number of I/O worker threads on client sockets

# Min number of threads to cap factor-based number to
# ClientSocketWorkerPoolSizeMin = 2

# The pool size factor is used to determine thread pool size
# using the following formula: ceil(available processors * factor).
# Resulting size is then bounded by the pool-size-min and
# pool-size-max values.
# ClientSocketWorkerPoolSizeFactor = 1.0

# Max number of threads to cap factor-based number to
# ClientSocketWorkerPoolSizeMax = 2




## Cluster Options

# The number of nodes in the cluster.
# ClusterSize: 1
# The node priority used during master election
# NodePriority: 0

# The number of nodes which must acknowledge commits before acknowledging to a client.
# CommitCount: -1
# The number of nodes which must acknowledge prepares.
# PrepareCount: -1

# Whether to use DNS lookup to discover other cluster nodes. Default: true
DiscoverViaDns: false

# DNS name from which other nodes can be discovered.
# ClusterDns: fake.dns

# The port on which cluster nodes' managers are running.
# ClusterGossipPort: 30777

# Endpoints for other cluster nodes from which to seed gossip
# GossipSeed:
#   - 
#   - 

# The interval, in ms, nodes should try to gossip with each other.
# GossipIntervalMs: 1000
# The amount of drift, in ms, between clocks on nodes allowed before gossip is rejected.
# GossipAllowedDifferenceMs: 60000
# The timeout, in ms, on gossip to another node.
# GossipTimeoutMs: 500




## Manager Options
---